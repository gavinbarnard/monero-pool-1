#!/usr/bin/env python

'''
Copyright (c) 2021, The Monero Project

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'''

from sys import version
import lmdb
from os import environ
from ctypes import *
from cmd import Cmd
from argparse import ArgumentParser

if int(version[0]) == 2:
    from struct import pack

ADDRESS_MAX = 128

class db:
    def __init__(self, db_path="{}/pool-dd".format(environ['HOME'])):
        self.env = lmdb.open(db_path, max_dbs=1)
        self.db = self.env.open_db("balance".encode(), dupfixed=False)

    def __del__(self):

        self.env.close()

    def get_wallet(self, address):
        txn = self.env.begin(db=self.db, write=False)
        cur = txn.cursor()
        if int(version[0]) >= 3:
            baddr = bytes(address, 'utf-8')
        elif int(version[0]) == 2:
            baddr = bytes(address)
        dif = ADDRESS_MAX - len(baddr)
        baddr += b"\0" * dif
        amount = 0
        if cur.get(baddr):
            k, v = cur.item()
            amount = c_longlong.from_buffer_copy(v).value  / 1e12
        else:
            amount = -1
        cur.close()
        txn.abort()
        return address, amount

    def list_wallets(self):
        txn = self.env.begin(db=self.db, write=False)
        cur = txn.cursor()
        k = cur.first()
        wallets = []
        while k:
            addr, v = cur.item()
            if int(version[0]) >= 3:
                addr = str(addr, 'utf-8').strip()
            elif int(version[0]) == 2:
                addr = str(addr).strip()
            wallets.append(addr)
            k = cur.next()
        return wallets

    def set_wallet_value(self, address, value):
        txn = self.env.begin(db=self.db, write=True)
        cur = txn.cursor()
        if int(version[0]) >= 3:
            baddr = bytes(address, 'utf-8')
        elif int(version[0]) == 2:
            baddr = bytes(address)
        dif = ADDRESS_MAX - len(baddr)
        baddr += b"\0" * dif
        value = float(value)
        amount = int(value * 1e12)
        if int(version[0]) >= 3:
            amount = amount.to_bytes(sizeof(c_longlong), byteorder='little')
        elif int(version[0]) == 2:
            amount = pack("<q", amount)
        rc = cur.get(baddr)
        print(rc)
        if rc and rc != lmdb.NotFoundError:
            print("staying ALIIIIIIIVE")
            rc = cur.put(baddr, amount, overwrite=True, append=False, dupdata=False)
        else:
            print("Why am I hereeeeeeeee?????")
            rc = cur.put(baddr, amount, overwrite=True, dupdata=False)
        print(rc)
        cur.close()
        txn.commit()
        self.env.sync()

    def del_wallet(self, address):
        a, v = self.get_wallet(address)
        print("{}: {}".format(a, v))
        txn = self.env.begin(db=self.db, write=True)
        cur = txn.cursor()
        if int(version[0]) >= 3:
            baddr = bytes(address, 'utf-8')
        elif int(version[0]) == 2:
            baddr = bytes(address)
        dif = ADDRESS_MAX - len(baddr)
        baddr += b"\0" * dif
        if cur.get(baddr):
            rc = cur.delete(baddr)
            if rc:
                print("Successfully deleted {}".format(address))
            else:
                print("There was an issue deleting {}".format(address))
        cur.close()
        txn.commit()
        self.env.sync()


class walletEditCli(Cmd):
    intro = 'Backup your DB before any edit\nTest on a staging server first\nYou are responsible for any dataloss'
    prompt = "(wallet-edit) "

    def __init__(self, *args, **kwargs):
        Cmd.__init__(self, *args, **kwargs)
        ap = ArgumentParser()
        ap.add_argument("db_path", action="store", type=str, default="{}/pool-dd".format(environ['HOME']))
        shell_args = ap.parse_args()
        self.database = db(db_path=shell_args.db_path)

    def do_get(self, arg):
        addr, amount =  self.database.get_wallet(arg)
        print("{}: {}".format(addr, amount))

    def do_list(self, arg):
        wallets = self.database.list_wallets()
        for w in wallets:
            print(w)
    
    def do_set(self, arg):
        addr, amount = arg.split(" ")
        if addr and amount:
            try:
                amount = float(amount)
            except ValueError:
                print("Value is not a float")
                return
            if len(addr) <= ADDRESS_MAX:
                self.database.set_wallet_value(addr, amount)
    
    def do_del(self, arg):
        self.database.del_wallet(arg)

    def do_exit(self, arg):
        return True
        


if __name__ == "__main__":
    walletEditCli().cmdloop()